geom_label_repel(data = df_filtered %>% filter(!is.na(label)),
aes(label = label, color = label)) +
theme_classic() +
theme(legend.position = "none", axis.title = element_blank(),
axis.text = element_text(size = rel(1)))
print(p)
})
df_filtered$label <- ifelse(df_filtered$P.ValueP4B4..P4H9. < 0.05, df_filtered$Gene.Symbol, NA)
ggplot(df_filtered, aes(x = log2(P4B4..P4H9.), y = -log10(P.ValueP4B4..P4H9.))) + geom_point() +
geom_point(data = df_filtered %>% filter(!is.na(label)), aes(color = label)) +
geom_hline(yintercept = -log10(0.05)) +
geom_label_repel(data = df_filtered %>% filter(!is.na(label)),
aes(label = label, color = label)) +
theme_classic() +
theme(legend.position = "none", axis.title = element_blank(),
axis.text = element_text(size = rel(1)))
ggsave("volcanoP3D9_p3H6.png", width = 2.5, height = 2)
png("volcano.png", width = 250, height = 250)
p
dev.off()
df_abundance <- df_filtered %>% select(-contains("\\.\\."))
df_rations <- df_filtered %>% select(contains("\\.\\."), Gene.Symbol)
View(df_abundance)
df_abundance <- df_filtered %>% select(-contains("\\.\\."))
df_abundance <- df_filtered %>% select(-contains("\\.$"))
View(df_abundance)
df_abundance <- df_filtered %>% select(-contains("\\d.$"))
df_abundance <- df_filtered %>% select(-contains("P\\d.$"))
ratioCols <- str_detect(colnames(df_filtered), "\\.\\.")
ratioCols
ratioCols <- which(!str_detect(colnames(df_filtered), "\\.\\."))
df_abundance <- df_filtered[, ratioCols]
View(df_abundance)
dfPCA <- df_abundance[, 1:5]
rownames(dfPCA) <- dfPCA$Gene.Symbol
dfPCA <- dfPCA %>% select(-Gene.Symbol) %>% t
length(unique(dfPCA$Gene.Symbol))
dfPCA <- df_abundance[, 1:5]
rownames(dfPCA) <- dfPCA$Gene.Symbol
length(unique(dfPCA$Gene.Symbol))
dfPCA <- df_abundance[, 1:5] %>% filter(!duplicated(Gene.Symbol))
rownames(dfPCA) <- dfPCA$Gene.Symbol
dfPCA <- dfPCA %>% select(-Gene.Symbol) %>% t
pcdat <- prcomp(dfPCA)
pcaDf <- pcdat$x
View(pcaDf)
summary(pcdat)
plot(pcaDf[,1], pcadf[,2])
plot(pcaDf[,1], pcaDf[,2])
pcaDf <- pcdat$x %>% data.frame
pcaDf <- pcdat$x %>% data.frame %>% mutate(cellLine = rownames(.))
ggplot(pcaDf, aes(x = PC1, y = PC2, color = cellLine)) + geom_point() + theme_Publication()
ggplot(pcaDf, aes(x = PC1, y = PC2, color = cellLine)) + geom_point(size = 5) + theme_Publication()
pcaGenes <- pcdat$rotation
View(pcaGenes)
pcaGenes <- pcdat$rotation %>% data.frame %>% sapply(abs)
View(pcaGenes)
pcaGenes <- pcdat$rotation %>% data.frame %>% mutate(Genes = rownames(.)) %>% sapply(abs)
pcaGenes <- pcdat$rotation %>% data.frame %>% mutate(Genes = rownames(.)) %>% mutate_if(is.numeric, abs)
View(pcaGenes)
pc1Genes <- pcaGenes %>% arrange(-PC1) %>% select(Genes) %>% unlist
dfPC1 <- df_abundance[, 1:5] %>% filter(!duplicated(Gene.Symbol)) %>%
filter(Gene.Symbol) %>% select(P3H6, P4H9)
View(df_abundance)
dfPC1 <- df_abundance[, 1:5] %>% filter(!duplicated(Gene.Symbol)) %>%
filter(Gene.Symbol %in% pc1Genes) %>% select(P3H6, P4H9)
View(dfPC1)
pc1Genes <- pcaGenes %>% arrange(-PC1) %>% slice(1:100)%>% select(Genes) %>% unlist
dfPC1 <- df_abundance[, 1:5] %>% filter(!duplicated(Gene.Symbol)) %>%
filter(Gene.Symbol %in% pc1Genes) %>% select(P3H6, P4H9, Gene.Symbol) %>%
gather(key = "cellLine", value = "Abundance", -Genes)
dfPC1 <- df_abundance[, 1:5] %>% filter(!duplicated(Gene.Symbol)) %>%
filter(Gene.Symbol %in% pc1Genes) %>% select(P3H6, P4H9, Gene.Symbol) %>%
gather(key = "cellLine", value = "Abundance", -Gene.Symbol)
dfPC1 <- df_abundance[, 1:5] %>% filter(!duplicated(Gene.Symbol)) %>%
filter(Gene.Symbol %in% pc1Genes) %>% select(P3H6, P4H9, Gene.Symbol)
rownames(dfPC1) <- dfPC1$Gene.Symbol
dfPC1 <- dfPC1[, -3]
heatmap(dfPC1)
View(dfPC1)
sapply(dfPC1, class)
heatmap(dfPC1 %>% as.matrix)
pc2Genes <- pcaGenes %>% arrange(-PC2) %>% slice(1:100)%>% select(Genes) %>% unlist
pcGenes <- c(pc1Genes, pc2Genes)
dfPC1 <- df_abundance[, 1:5] %>% filter(!duplicated(Gene.Symbol)) %>%
filter(Gene.Symbol %in% pcGenes)
rownames(dfPC1) <- dfPC1$Gene.Symbol
dfPC1 <- dfPC1[, -3]
heatmap(dfPC1 %>% as.matrix)
View(dfPC1)
dfPC1 <- df_abundance[, 1:5] %>% filter(!duplicated(Gene.Symbol)) %>%
filter(Gene.Symbol %in% pcGenes)
rownames(dfPC1) <- dfPC1$Gene.Symbol
dfPC1 <- dfPC1[, -5]
heatmap(dfPC1 %>% as.matrix)
zNorm <- function(x)
{
(x-mean(x))/sd(x)
}
dfPC1 <- dfPC1[, -5] %>% mutate_all(zNorm)
dfPC1 <- df_abundance[, 1:5] %>% filter(!duplicated(Gene.Symbol)) %>%
filter(Gene.Symbol %in% pcGenes)
rownames(dfPC1) <- dfPC1$Gene.Symbol
dfPC <- dfPC1[, -5] %>% mutate_all(zNorm) %>% mutate(Gene = dfPC1$Gene.Symbol)
dfPC <- dfPC1[, -5] %>% mutate_all(zNorm) %>% mutate(Gene = dfPC1$Gene.Symbol) %>%
gather(key = "cellLine", value = "Abundance", - Gene)
ggplot(dfPC, aes(x = CellLine, y = Gene, fill = Abundance)) + geom_tile() + theme_Publication()
ggplot(dfPC, aes(x = cellLine, y = Gene, fill = Abundance)) + geom_tile() + theme_Publication()
ggplot(dfPC, aes(x = cellLine, y = Gene, fill = Abundance)) + geom_tile() + theme_Publication() +
scale_fill_viridis_c() + theme(legend.position = "right", legend.direction = "vertical")
ggplot(dfPC, aes(x = cellLine, y = Gene, fill = Abundance)) + geom_tile() + theme_Publication() +
scale_fill_viridis_c() + theme(legend.position = "right", legend.direction = "vertical", legend.key.size = unit(1, "cm"))
dfPC <- dfPC1[, -5]
library(gplots)
heatmap.2(dfPC %>% as.matrix)
View(dfPC)
dfPC2 <- dfPC %>% mutate_all(zNorm)
colnames(dfPC2)
colnames(dfPC2) <- c("Sesn1", "Res1", "Res2", "Sens2")
View(pcaDf)
View(df_abundance)
heatmap.2(dfPC %>% as.matrix %>% t)
heatmap.2(dfPC %>% as.matrix %>% t, trace = F)
heatmap.2(dfPC %>% as.matrix %>% t, trace = NA)
heatmap.2(dfPC %>% as.matrix %>% t, trace = "none")
# source("plot_theme.R")
# library(GGally)
library(gplots)
discret <- function(x, w = 0.5){
mx <- sum(x*w)/sum(w)
sx <- sqrt(sum(w*(x-mx)^2)/sum(w))
x <- (x-mx)/sx
ifelse(x>0, 1, 0)
}
library(tidyverse)
readParams <- function(topoFile)
{
net <- topoFile %>% str_remove(".topo")
df <- read.delim(paste0(net, "_parameters.dat"), header = F)
pars <- read.delim(paste0(net, ".prs"), stringsAsFactors = F)
pars <- pars$Parameter
colnames(df) <- c("ParID", "nStates", pars)
return(df)
}
linkStrengthCalc <- function(topoFile)
{
df <- readParams(topoFile)
topoDf <- read.delim(topoFile, stringsAsFactors = F)
links <- paste0(topoDf[[1]], "_", topoDf[[2]])
par_new <- apply(df, 1, function(x){#browser()
x <- x[-c(1,2)]
linkStrengths <- apply(topoDf, 1, function(y){
Source <- y[1]
Target <- y[2]
Type <- as.integer(y[3])
g <- x[paste0("Prod_of_", Source)]
k <- x[paste0("Deg_of_", Source)]
n <- x[paste0("Num_of_", Source, "To", Target)]
l <- ifelse(Type == 1, "Act", "Inh")
l <- x[paste0(l, "_of_", Source, "To", Target)]
h0 <- x[paste0("Trd_of_", Source, "To", Target)]
g*n/(l*h0*k)
})
return(linkStrengths)
}) %>% t %>% data.frame %>% set_names(links) %>% mutate(nStates = df$nStates, ParID = 1:nrow(df))
write.csv(par_new, str_replace(topoFile, ".topo", "linkStrength.csv"), row.names = F)
return(par_new)
}
gkNorm <- function(topoFile)
{
params <- readParams(topoFile)
nodes <- colnames(params)
nodes <- nodes[str_detect(nodes, "Prod")] %>% str_remove("Prod_of_")
gkDf <- sapply(nodes, function(x){
params %>% select(contains(paste0("_",x))) %>% set_names("g", "k") %>%
mutate(gk = g/k) %>% select(gk) %>% unlist
}) %>% data.frame %>% set_names(nodes) %>% mutate(ParID = params$ParID)
solutionDf <- read.delim(paste0(str_remove(topoFile, ".topo"), "_solution.dat"), header = F) %>%
set_names(c("ParID", "nStates", "RelStab", nodes)) %>% mutate(RelStab = RelStab/max(RelStab))
solnDf <- apply(solutionDf, 1, function(x){
par <- x[1]
x[nodes] <- x[nodes] - log2(gkDf[par, 1:length(nodes)])
x
}) %>% reduce(rbind.data.frame)
write.csv(solnDf, str_replace(topoFile, ".topo", "_gkNorm.csv"), row.names = F)
return(solnDf)
}
solutionCompile <- function(topoFile)
{
net <- topoFile %>% str_remove(".topo")
solutionFiles <- list.files(".", "solution_")
solutionLengths <- sapply(solutionFiles, function(x){
length(readLines(x))
})
bads <- which(solutionLengths < 2)
solutionFiles <- solutionFiles[-bads]
pars <- read.delim(paste0(net, ".prs"), stringsAsFactors = F)
pars <- pars$Parameter
nodes <- pars[which(str_detect(pars, "Prod"))] %>% str_remove("Prod_of_")
nNodes <- length(nodes)
compiled <- lapply(solutionFiles, function(x){
df <- read_delim(x, delim = "\t", col_names = F)
dfextra <- df[, 1:2]
dfStates <- df[, -(1:2)]
colz <- 1:ncol(dfStates)
nStates <- length(colz)/nNodes
dfextra$relStab <- 1/nStates
colz <- split(colz, ceiling(seq_along(colz)/nNodes))
df <- lapply(colz, function(y){
cbind.data.frame(dfextra, dfStates[, y])
}) %>% reuce(rbind.data.frame)
}) %>% reduce(rbind.data.frame) %>%
set_names(c("ParID", "nStates", "RelStab", nodes)) %>%
mutate(ParID = as.integer(ParID)) %>%
arrange(ParID)
write_delim(compiled, paste0(net, "_solution.dat"), delim = "\t")
}
phaseCalc <- function(topoFile, gk = F)
{
params <- readParams(topoFile)
nodes <- colnames(params)
nodes <- nodes[str_detect(nodes, "Prod")] %>% str_remove("Prod_of_")
if(gk){
solnDf <- gkNorm(topoFile)
}
else
{
solnFile <- paste0(str_remove(topoFile, ".topo"), "_solution.dat")
if(!file.exists(solnFile))
solutionCompile(topoFile)
solnDf <- read.delim(solnFile, header = F) %>%
set_names(c("ParID", "nStates", "RelStab", nodes))
}
solnDf[, nodes] <- solnDf %>% select(nodes) %>% sapply(function(x){
discret(x, solnDf$RelStab)
})
solnDf <- solnDf %>% unite("State", nodes, sep = "") %>% group_by(ParID) %>%
summarise(Phase = paste0(unique(State), collapse = "-"))
params <- merge(params, solnDf, by = "ParID", all = T)
nam <- str_remove(topoFile, ".topo")
if(gk)
{
nam <- paste0(nam, "gk")
}
nam <- paste0(nam, "_phases.csv")
write.csv(params, nam, row.names = F)
return(params)
}
topoFile <- "TT.topo"
phaseCalc(topoFile)
getwd()
install.packages("sRACIPE")
BiocManager::install("sRACIPE")
setwd("D:/Github/Projects/Ongoing/Naisana/ProteomicsData")
library(RColorBrewer)
hmcol <- colorRampPalette(brewer.pal(9, "GnBu"))(100)
# heatmap.2(dfPC %>% as.matrix %>% t, trace = "none", )
heatmap.2(dfPC %>% as.matrix %>% t, col=hmcol,
trace = "none",dendrogram = "none", scale = "column")
# heatmap.2(dfPC %>% as.matrix %>% t, trace = "none", )
heatmap.2(dfPC %>% as.matrix, col=hmcol,
trace = "none",dendrogram = "none", scale = "column")
# heatmap.2(dfPC %>% as.matrix %>% t, trace = "none", )
heatmap.2(dfPC %>% as.matrix, col=hmcol,
trace = "none",dendrogram = "roow", scale = "column")
# heatmap.2(dfPC %>% as.matrix %>% t, trace = "none", )
heatmap.2(dfPC %>% as.matrix, col=hmcol,
trace = "none",dendrogram = "row", scale = "column")
?png
# heatmap.2(dfPC %>% as.matrix %>% t, trace = "none", )
heatmap.2(dfPC %>% as.matrix, col=hmcol,
trace = "none",dendrogram = "row", scale = "column")
# heatmap.2(dfPC %>% as.matrix %>% t, trace = "none", )
heatmap.2(dfPC %>% as.matrix %>% t, col=hmcol,
trace = "none",dendrogram = "row", scale = "column")
# heatmap.2(dfPC %>% as.matrix %>% t, trace = "none", )
p <- heatmap.2(dfPC %>% as.matrix %>% t, col=hmcol,
trace = "none",dendrogram = "row", scale = "column")
p$carpet
dfnewOrder <- p$carpet %>% data.frame %>% mutate(Gene = factor(rownames(.), levels = rownames(.))) %>%
gather(key = "CellLine", value = "Abundance", -Gene)
View(dfnewOrder)
ggplot(dfnewOrder, aes(x = Gene, y = CellLine, fill = Abundance)) + geom_tile() +
theme_Publication() + theme(legend.position = "top", legend.key.size = unit(1, "cm"))
ggplot(dfnewOrder, aes(x = Gene, y = CellLine, fill = Abundance)) + geom_tile() +
theme_Publication() + theme(legend.position = "top", legend.key.size = unit(1, "in"))
ggplot(dfnewOrder, aes(x = Gene, y = CellLine, fill = Abundance)) + geom_tile() +
theme_Publication() + theme(legend.position = "top", legend.key.width = unit(1, "in"))
ggplot(dfnewOrder, aes(x = Gene, y = CellLine, fill = Abundance)) + geom_tile() +
theme_Publication() + theme(legend.position = "top", legend.key.width = unit(1, "in"),
legend.key.height = unit(0.5, "cm"))
ggplot(dfnewOrder, aes(x = Gene, y = CellLine, fill = Abundance)) + geom_tile() +
theme_Publication() + theme(legend.position = "top", legend.key.width = unit(1, "in"),
legend.key.height = unit(0.5, "cm")) +
scale_fill_virdis_c()
ggplot(dfnewOrder, aes(x = Gene, y = CellLine, fill = Abundance)) + geom_tile() +
theme_Publication() + theme(legend.position = "top", legend.key.width = unit(1, "in"),
legend.key.height = unit(0.5, "cm")) +
scale_fill_viridis_c()
ggplot(dfnewOrder, aes(x = Gene, y = CellLine, fill = Abundance)) + geom_tile() +
theme_Publication() + theme(legend.position = "top", legend.key.width = unit(1, "in"),
legend.key.height = unit(0.5, "cm"),
axis.text.x = element_text(angle = 90, size = rel(0.01))) +
scale_fill_viridis_c()
ggplot(dfnewOrder, aes(x = Gene, y = CellLine, fill = Abundance)) + geom_tile() +
theme_Publication() + theme(legend.position = "top", legend.key.width = unit(1, "in"),
legend.key.height = unit(0.5, "cm"),
axis.text.x = element_text(angle = 90, size = rel(0.1))) +
scale_fill_viridis_c()
ggplot(dfnewOrder, aes(x = Gene, y = CellLine, fill = Abundance)) + geom_tile() +
theme_Publication() + theme(legend.position = "top", legend.key.width = unit(1, "in"),
legend.key.height = unit(0.5, "cm"),
axis.text.x = element_text(angle = 90, size = rel(0.5))) +
scale_fill_viridis_c()
ggplot(dfnewOrder, aes(x = Gene, y = CellLine, fill = Abundance)) + geom_tile() +
theme_Publication() + theme(legend.position = "top", legend.key.width = unit(1, "in"),
legend.key.height = unit(0.5, "cm"),
axis.text.x = element_text(angle = 90, size = rel(0.2))) +
scale_fill_viridis_c()
ggplot(dfnewOrder, aes(x = Gene, y = CellLine, fill = Abundance)) + geom_tile() +
theme_Publication() + theme(legend.position = "top", legend.key.width = unit(1, "in"),
legend.key.height = unit(0.5, "cm"),
axis.text.x = element_text(angle = 90, size = rel(0.2), hjust = 1)) +
scale_fill_viridis_c()
ggplot(dfnewOrder, aes(x = Gene, y = CellLine, fill = Abundance)) + geom_tile() +
theme_Publication() + theme(legend.position = "top", legend.key.width = unit(1, "in"),
legend.key.height = unit(0.5, "cm"),
axis.text.x = element_text(angle = 90, size = rel(0.3), hjust = 1)) +
scale_fill_viridis_c()
ggplot(dfnewOrder, aes(x = Gene, y = CellLine, fill = Abundance)) + geom_tile() +
theme_Publication() + theme(legend.position = "top", legend.key.width = unit(1, "in"),
legend.key.height = unit(0.5, "cm"),
axis.text.x = element_text(angle = 90, size = rel(0.3), hjust = 1, vjust = 0.5)) +
scale_fill_viridis_c()
ggsave("ProteinAbunsanceHeatmap.png", width = 12, height = 5)
ggsave("ProteinAbunsanceHeatmap.png", width = 14, height = 5)
ggplot(dfnewOrder, aes(x = Gene, y = CellLine, fill = Abundance)) + geom_tile() +
theme_Publication() + theme(legend.position = "top", legend.key.width = unit(1, "in"),
legend.key.height = unit(0.5, "cm"),
axis.text.x = element_text(angle = 90, size = rel(0.3), hjust = 1, vjust = 0.5),
axis.title = element_blank()) +
scale_fill_viridis_c()
ggsave("ProteinAbunsanceHeatmap.png", width = 14, height = 7)
setwd("C:/Users/Asus/Downloads")
df <- read.csv("EMT_RACIPE_grpstrON_MesEpi.csv")
View(df)
df$Phenotype <- c(rep("M", 8), rep("E", 8), rep("H", 20))
library(tidyverse)
theme_Publication <- function(base_size=14, base_family="sans") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family=base_family)
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(0.2, "cm"),
legend.margin = unit(0, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
ggplot(df, aes(x = MeanGrpStr, fill = Phenotype)) + geom_histogram()
ggplot(df, aes(x = MeanGrpStr, fill = Phenotype)) + geom_histogram(stat = "density")
ggplot(df, aes(x = MeanGrpStr, fill = Phenotype)) + geom_histogram(stat = "density") + theme_Publication() + labs(x = "Group Strength of co-expressing states", y = "Density")
ggsave("hybridAnalysis.png", width = 7, height = 5)
inflMat <- read.csv("D:\\Github\\Projects\\Ongoing\\GroupTheory\\AditiVarun\\WTresults\\Influence\\EMT_RACIPE_fullMat.csv")
View(inflMat)
nodes <- inflMat$X
setwd("D:/Github/Projects/Ongoing/GroupTheory/artificialNets")
df1 <- read.csv("ANC1_K_ssDat.csv")
df2 <- read.csv("ANC2_K_ssDat.csv")
df3 <- read.csv("ANC3_K_ssDat.csv")
df <- list(df1, df2, df3) %>% reduce(rbind.data.frame)
View(df)
df$Net <- df$Net %>% str_remove("_.*")
df <- list(df1, df2, df3) %>% reduce(rbind.data.frame)
df$Net <- df$Net %>% str_remove("\\d_.*")
df <- list(df1, df2, df3) %>% reduce(rbind.data.frame)
df$Net1 <- df$Net %>% str_remove("\\d_.*")
df$Net1 <- df$Net %>% str_remove("_\\d_\\d+?")
df$Net1 <- df$Net %>% str_remove("_\\d+?$")
ggplot(df, aes(x= nSS), fill = Net1) + geom_histogram(stat = "density") + theme_Publication()
ggplot(df, aes(x= nSS, fill = Net1)) + geom_histogram(stat = "density") + theme_Publication()
ggsave("ssPlot.png")
ggplot(df, aes(x= nSS, fill = Net1)) + geom_freqpoly() + theme_Publication()
ggplot(df, aes(x= nSS, color = Net1)) + geom_freqpoly() + theme_Publication()
library(tidyverse)
x <- 1:10 %>% as.character
as.integer(x)
setwd("D:/Github/Projects/Ongoing/Mubasher/Boolean")
library(tidyverse)
statesplit <- function(s){
s %>% str_split("") %>% unlist %>% as.integer
}
statesplit <- Vectorize(statesplit)
cormat <- function(topoFile)
{
net <- topoFile %>% str_remove(".topo")
freqDf <- read.csv(paste0(net, "_finFlagFreq.csv")) %>% filter(flag == 1) %>%
select(states, Avg0) %>% drop_na() %>% mutate(Avg0 = Avg0*10000 %>% round)
nodes <- readLines(paste0(net, "_nodes.txt"))
states <- rep(freqDf$states, freqDf$Avg0) %>% statesplit %>% t %>% data.frame %>%
set_names(nodes)
corr <- cor(states) %>% data.frame
write.csv(net, "_cor.csv")
return(corr)
}
cormat <- Vectorize(cormat)
correturn <- function(folder)
{
cwd <- getwd()
setwd(folder)
topoFiles <- list.files(".", ".topo")
corMats <- cormat(topoFiles)
setwd(cwd)
return(corMats)
}
getwd()
folder <- "grhl-ovol-nrf topo files/"
correturn(folder)
browser()
cormat <- function(topoFile)
{
net <- topoFile %>% str_remove(".topo")
freqDf <- read.csv(paste0(net, "_finFlagFreq.csv")) %>% filter(flag == 1) %>%
select(states, Avg0) %>% drop_na() %>% mutate(Avg0 = Avg0*10000 %>% round)
nodes <- readLines(paste0(net, "_nodes.txt"))
browser()
states <- rep(freqDf$states, freqDf$Avg0) %>% statesplit %>% t %>% data.frame %>%
set_names(nodes)
corr <- cor(states) %>% data.frame
write.csv(net, "_cor.csv")
return(corr)
}
cormat <- Vectorize(cormat)
correturn <- function(folder)
{
cwd <- getwd()
setwd(folder)
topoFiles <- list.files(".", ".topo")
corMats <- cormat(topoFiles)
setwd(cwd)
return(corMats)
}
getwd()
setwd("..")
correturn(folder)
states <- rep(freqDf$states, freqDf$Avg0) %>% statesplit
View(states)
statesplit <- function(s){
s <- s %>% str_split("") %>% unlist %>% as.integer
s[-c(1, length(s))]
}
statesplit <- Vectorize(statesplit)
states <- rep(freqDf$states, freqDf$Avg0) %>% statesplit %>% t %>% data.frame %>%
set_names(nodes)
View(states)
corr <- cor(states) %>% data.frame
View(corr)
cormat <- function(topoFile)
{
net <- topoFile %>% str_remove(".topo")
freqDf <- read.csv(paste0(net, "_finFlagFreq.csv")) %>% filter(flag == 1) %>%
select(states, Avg0) %>% drop_na() %>% mutate(Avg0 = Avg0*10000 %>% round)
nodes <- readLines(paste0(net, "_nodes.txt"))
states <- rep(freqDf$states, freqDf$Avg0) %>% statesplit %>% t %>% data.frame %>%
set_names(nodes)
corr <- cor(states) %>% data.frame
write.csv(net, "_cor.csv")
return(corr)
}
cormat <- Vectorize(cormat)
setwd("..")
correturn(folder)
statesplit <- function(s){
s <- s %>% str_split("") %>% unlist %>% as.integer
s[-c(1, length(s))]
}
statesplit <- Vectorize(statesplit)
setwd("..")
correturn(folder)
cormat <- function(topoFile)
{
net <- topoFile %>% str_remove(".topo")
freqDf <- read.csv(paste0(net, "_finFlagFreq.csv")) %>% filter(flag == 1) %>%
select(states, Avg0) %>% drop_na() %>% mutate(Avg0 = Avg0*10000 %>% round)
nodes <- readLines(paste0(net, "_nodes.txt"))
states <- rep(freqDf$states, freqDf$Avg0) %>% statesplit %>% t %>% data.frame %>%
set_names(nodes)
corr <- cor(states) %>% data.frame
write.csv(corr, paste0(net, "_cor.csv"))
return(corr)
}
cormat <- Vectorize(cormat)
setwd("..")
correturn(folder)
